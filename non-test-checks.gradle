apply plugin: 'checkstyle'
apply plugin: 'codenarc'

/** Checkstyle config **/
String checkstyleConfig = 'checkstyle.xml'
downloadFile(checkstyleConfig)

checkstyle {
    configFile rootProject.file(checkstyleConfig)
    toolVersion = '10.12.5'
}

/** Codenarc config **/
String codenarcConfig = 'codenarc.xml'
downloadFile(codenarcConfig)

codenarc {
    configFile rootProject.file(codenarcConfig)
    toolVersion = '3.2.0'
}

/** Spotless config **/
if(project.plugins.findPlugin('com.diffplug.spotless')) {
    String codeFormatterConfig = 'code-formatter.xml'
    downloadFile(codeFormatterConfig)
    def eclipseFormatterVersion = '4.26'

    spotless {
        if(project.plugins.findPlugin('java')) {
            java {
                importOrder('java', 'javax', 'org', 'io.github.devatherock', '')
                removeUnusedImports()
                eclipse(eclipseFormatterVersion).configFile(codeFormatterConfig)
                toggleOffOn()
            }

            kotlin {
                ktlint()
                toggleOffOn()
            }
        }

        if(project.plugins.findPlugin('groovy')) {
            groovy {
                importOrder('java', 'javax', 'groovy', 'org', 'io.github.devatherock', '')
                excludeJava()
                toggleOffOn()
            }
        }

        groovyGradle {
            target '*.gradle'
            greclipse(eclipseFormatterVersion).configFile('code-formatter.xml')
            toggleOffOn()
        }

        format 'xml', {
            target(getPropertyValueAsArray('spotless.xml.targets') ?: '**/*.xml')
            eclipseWtp('xml')
            toggleOffOn()
        }
    }

    build.dependsOn spotlessApply

    // checkstyleMain task won't exist if there are no main java source files
    if(project.tasks.findByPath('checkstyleMain')) {
        checkstyleMain.mustRunAfter(spotlessApply)
    }
}

/** ktlint config **/
if(project.plugins.findPlugin('org.jlleitschuh.gradle.ktlint')) {
    ktlint {
        version = '0.43.0'
        android = false
        outputToConsole = true
        enableExperimentalRules = true
        disabledRules = [
            'final-newline'
        ]
        reporters {
            reporter 'checkstyle'
        }
    }

    // To format code in dev instead of failing build
    if(!Boolean.getBoolean('CI')) {
        compileKotlin.dependsOn ktlintFormat
    }
}

/** Dependency check plugin config **/
if (project.plugins.findPlugin('org.owasp.dependencycheck')) {
    String pluginVersion = findPluginVersion('org.owasp.dependencycheck')

    dependencyCheck {
        if (Integer.parseInt(pluginVersion.substring(0, pluginVersion.indexOf('.'))) > 8) {
            nvd {
                apiKey = System.env.NVD_API_KEY
                validForHours = 240

                if (Boolean.parseBoolean(getPropertyValue('dependency.check.nvd.useDatafeedUrl', 'false'))) {
                    datafeedUrl = 'https://jeremylong.github.io/DependencyCheck/hb_nvd/'
                }
            }
        }
        data {
            directory = "${System.getProperty('user.home')}${System.properties['file.separator']}.gradle"
        }
        analyzers {
            assemblyEnabled = false
            ossIndex {
                enabled = Boolean.parseBoolean(getPropertyValue('dependency.check.oss.enabled', 'true'))
            }
            retirejs {
                enabled = Boolean.parseBoolean(getPropertyValue('dependency.check.retirejs.enabled', 'false'))
            }
        }
        failBuildOnCVSS = 7
        scanConfigurations = [
            'annotationProcessor',
            'compileClasspath',
            'implementation',
            'runtimeClasspath',
            'runtimeOnly'
        ]
        suppressionFile = "${getPropertyValue('gradle.includes.location', 'https://raw.githubusercontent.com/devatherock/gradle-includes/master')}/config/dependency-check-suppressions.xml"
    }

    dependencyCheckAggregate.enabled = System.env.DEPENDENCY_CHECK_ENABLED ?
            Boolean.parseBoolean(System.env.DEPENDENCY_CHECK_ENABLED) : true
    check.dependsOn dependencyCheckAggregate
}

/**
 * Fetches the value of a gradle property as an array
 *
 * @param propertyName
 * @return the property value array
 */
def getPropertyValueAsArray(String propertyName) {
    def propertyValues = null

    if (project.hasProperty(propertyName)) {
        propertyValues = project[propertyName].split(',') as Object[]
    }

    return propertyValues
}

/**
 * Fetches the value of a gradle property
 *
 * @param propertyName
 * @param propertyValueDefault
 * @return the property value
 */
String getPropertyValue(String propertyName, String propertyValueDefault = null) {
    return project.hasProperty(propertyName) ? project[propertyName] : propertyValueDefault
}

/**
 * Downloads a file from github
 *
 * @param fileName
 */
void downloadFile(String fileName) {
    File file = new File(fileName)
    file.delete()

    String gradleIncludesLocation = getPropertyValue('gradle.includes.location',
            'https://raw.githubusercontent.com/devatherock/gradle-includes/master')

    if (gradleIncludesLocation =~ '^[a-z]+://.+') {
        file << new URL("${gradleIncludesLocation}/config/${fileName}").text
    } else {
        file << new File("${gradleIncludesLocation}/config/${fileName}").text
    }
}

/**
 * Finds the version of a plugin used
 *
 * @param pluginName
 * @return the plugin's version
 */
String findPluginVersion(String pluginName) {
    String pluginVersion

    if (project.plugins.findPlugin(pluginName)) {
        pluginVersion = project.buildscript.configurations.classpath.resolvedConfiguration.firstLevelModuleDependencies.find {
            it.moduleGroup == pluginName
        }.moduleVersion
        logger.info("Version of '${pluginName}': ${pluginVersion}")
    }

    return pluginVersion
}