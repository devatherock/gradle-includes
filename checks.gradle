apply plugin: 'checkstyle'

if(project.plugins.findPlugin('jacoco')) {
    jacocoTestReport {
        if(project.ext.has('jacoco') && project['jacoco'].exclusions) {
            afterEvaluate {
                classDirectories.from = files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: project['jacoco'].exclusions)
                })
            }
        }

        reports {
            xml.enabled true
            csv.enabled false
            html.enabled true
            xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml") // Required for coveralls and sonar
            html.destination file("${buildDir}/reports/jacoco")
        }
    }

    jacocoTestCoverageVerification {
        if(project.ext.has('jacoco') && project['jacoco'].exclusions) {
            afterEvaluate {
                classDirectories.from = files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: project['jacoco'].exclusions)
                })
            }
        }

        violationRules {
            rule {
                element = 'CLASS'

                // Exclude classes with custom coverage rules
                if(project.ext.has('jacoco') && project['jacoco'].coverageThresholds) {
                    excludes = project['jacoco'].coverageThresholds.keySet() as List
                }

                limit {
                    counter = 'BRANCH'
                    minimum = 1.00
                }
                limit {
                    counter = 'COMPLEXITY'
                    minimum = 1.00
                }
                limit {
                    counter = 'INSTRUCTION'
                    minimum = 1.00
                }
                limit {
                    counter = 'LINE'
                    minimum = 1.00
                }
            }

            // Custom coverage rules
            if(project.ext.has('jacoco') && project['jacoco'].coverageThresholds) {
                project['jacoco'].coverageThresholds.each { className, thresholds ->
                    rule {
                        element = 'CLASS'
                        includes = [
                            className
                        ]
                        limit {
                            counter = 'BRANCH'
                            minimum = thresholds['BRANCH'] ?: 1.00
                        }
                        limit {
                            counter = 'COMPLEXITY'
                            minimum = thresholds['COMPLEXITY'] ?: 1.00
                        }
                        limit {
                            counter = 'INSTRUCTION'
                            minimum = thresholds['INSTRUCTION'] ?: 1.00
                        }
                        limit {
                            counter = 'LINE'
                            minimum = thresholds['LINE'] ?: 1.00
                        }
                    }
                }
            }
        }
    }
    jacocoTestReport.finalizedBy jacocoTestCoverageVerification

    test {
        finalizedBy jacocoTestReport
    }
}

tasks.withType(Test) {
    testLogging {
        showStandardStreams = false
        events 'passed', 'failed'
    }
}

/** Checkstyle config **/
File checkstyleConfig = new File('checkstyle.xml')
checkstyleConfig.delete()
checkstyleConfig << new URL('https://raw.githubusercontent.com/devatherock/gradle-includes/master/config/checkstyle.xml').text

checkstyle {
    configFile rootProject.file('checkstyle.xml')
    toolVersion = '8.41'
}

/** SonarQube config **/
if(project.plugins.findPlugin('org.sonarqube')) {
    sonarqube {
        def prLink = System.env['CIRCLE_PULL_REQUEST']

        properties {
            property 'sonar.junit.reportPaths', 'build/test-results/test'
            property 'sonar.organization', 'devaprasadh-github'
            property 'sonar.host.url', 'https://sonarcloud.io'

            // Required for PR analysis
            if(prLink) {
                property 'sonar.pullrequest.branch', System.env['CIRCLE_BRANCH']
                property 'sonar.pullrequest.key', prLink.substring(prLink.lastIndexOf('/') + 1)
                property 'sonar.pullrequest.base', 'master'
                property 'sonar.pullrequest.provider', 'github'
                property 'sonar.pullrequest.github.repository', "devatherock/${System.env['CIRCLE_PROJECT_REPONAME']}"
                property 'sonar.pullrequest.github.endpoint', 'https://api.github.com/'
            }
        }
    }
}

/** Spotless config **/
if(project.plugins.findPlugin('com.diffplug.spotless')) {
    File codeFormatter = new File('code-formatter.xml')
    codeFormatter.delete()
    codeFormatter << new URL('https://raw.githubusercontent.com/devatherock/gradle-includes/master/config/code-formatter.xml').text

    spotless {
        java {
            importOrder('java', 'javax', 'org', 'io.github.devatherock', '')
            eclipse().configFile('code-formatter.xml')
        }
        groovy {
            importOrder('java', 'javax', 'groovy', 'org', 'io.github.devatherock', '')
            excludeJava()
        }
        groovyGradle {
            target '*.gradle'
            greclipse().configFile('code-formatter.xml')
        }
        kotlin {
            ktlint()
        }
    }
    build.dependsOn spotlessApply
}

/** ktlint config **/
if(project.plugins.findPlugin('org.jlleitschuh.gradle.ktlint')) {
    ktlint {
        version = '0.43.0'
        android = false
        outputToConsole = true
        enableExperimentalRules = true
        disabledRules = [
            'final-newline'
        ]
        reporters {
            reporter 'checkstyle'
        }
    }

    // To format code in dev instead of failing build
    if(!Boolean.getBoolean('CI')) {
        compileKotlin.dependsOn ktlintFormat
    }
}

/** Dependency check plugin config **/
if (project.plugins.findPlugin('org.owasp.dependencycheck')) {
    dependencyCheck {
        data {
            directory = "${System.getProperty('user.home')}${System.properties['file.separator']}.gradle"
        }
        analyzers {
            assemblyEnabled = false
        }
        failBuildOnCVSS = 7
        cveValidForHours = 24
        suppressionFile = 'https://raw.githubusercontent.com/devatherock/gradle-includes/master/config/dependency-check-suppressions.xml'
    }

    check.dependsOn dependencyCheckAggregate
}
