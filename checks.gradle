apply from: "${getPropertyValue('gradle.includes.location', 'https://raw.githubusercontent.com/devatherock/gradle-includes/master')}/non-test-checks.gradle"

if(project.plugins.findPlugin('jacoco')) {
    jacocoTestReport {
        if(project.ext.has('jacoco') && project['jacoco'].exclusions) {
            afterEvaluate {
                classDirectories.from = files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: project['jacoco'].exclusions)
                })
            }
        }

        reports {
            xml.required = true
            csv.required = false
            html.required = true
            xml.outputLocation = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml") // Required for coveralls and sonar
            html.outputLocation = file("${buildDir}/reports/jacoco")
        }
    }

    jacocoTestCoverageVerification {
        if(project.ext.has('jacoco') && project['jacoco'].exclusions) {
            afterEvaluate {
                classDirectories.from = files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: project['jacoco'].exclusions)
                })
            }
        }

        violationRules {
            rule {
                element = 'CLASS'

                // Exclude classes with custom coverage rules
                if(project.ext.has('jacoco') && project['jacoco'].coverageThresholds) {
                    excludes = project['jacoco'].coverageThresholds.keySet() as List
                }

                limit {
                    counter = 'BRANCH'
                    minimum = 1.00
                }
                limit {
                    counter = 'COMPLEXITY'
                    minimum = 1.00
                }
                limit {
                    counter = 'INSTRUCTION'
                    minimum = 1.00
                }
                limit {
                    counter = 'LINE'
                    minimum = 1.00
                }
            }

            // Custom coverage rules
            if(project.ext.has('jacoco') && project['jacoco'].coverageThresholds) {
                project['jacoco'].coverageThresholds.each { className, thresholds ->
                    rule {
                        element = 'CLASS'
                        includes = [
                            className
                        ]
                        limit {
                            counter = 'BRANCH'
                            minimum = thresholds['BRANCH'] ?: 1.00
                        }
                        limit {
                            counter = 'COMPLEXITY'
                            minimum = thresholds['COMPLEXITY'] ?: 1.00
                        }
                        limit {
                            counter = 'INSTRUCTION'
                            minimum = thresholds['INSTRUCTION'] ?: 1.00
                        }
                        limit {
                            counter = 'LINE'
                            minimum = thresholds['LINE'] ?: 1.00
                        }
                    }
                }
            }
        }
    }
    jacocoTestReport.finalizedBy jacocoTestCoverageVerification

    test {
        finalizedBy jacocoTestReport
    }
}

tasks.withType(Test) {
    testLogging {
        showStandardStreams = false
        events 'passed', 'failed'
    }
}

/** SonarQube config **/
if(project.plugins.findPlugin('org.sonarqube')) {
    sonarqube {
        def prLink = System.env['CIRCLE_PULL_REQUEST']

        properties {
            property 'sonar.junit.reportPaths', 'build/test-results/test'
            property 'sonar.organization', 'devaprasadh-github'
            property 'sonar.host.url', 'https://sonarcloud.io'

            // Required for PR analysis
            if(prLink) {
                property 'sonar.pullrequest.branch', System.env['CIRCLE_BRANCH']
                property 'sonar.pullrequest.key', prLink.substring(prLink.lastIndexOf('/') + 1)
                property 'sonar.pullrequest.base', 'master'
                property 'sonar.pullrequest.provider', 'github'
                property 'sonar.pullrequest.github.repository', "devatherock/${System.env['CIRCLE_PROJECT_REPONAME']}"
                property 'sonar.pullrequest.github.endpoint', 'https://api.github.com/'
            }
        }
    }
}

/**
 * Fetches the value of a gradle property
 *
 * @param propertyName
 * @param propertyValueDefault
 * @return the property value
 */
String getPropertyValue(String propertyName, String propertyValueDefault = null) {
    return project.hasProperty(propertyName) ? project[propertyName] : propertyValueDefault
}